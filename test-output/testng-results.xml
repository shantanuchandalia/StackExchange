<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="20" passed="20">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="114664" started-at="2020-08-12T19:10:23 IST" finished-at="2020-08-12T19:12:18 IST">
    <groups>
    </groups>
    <test name="Test" duration-ms="114664" started-at="2020-08-12T19:10:23 IST" finished-at="2020-08-12T19:12:18 IST">
      <class name="badge.api.sanity.Tags_APItest">
        <test-method status="PASS" signature="StatusCodeVerification()[pri:0, instance:badge.api.sanity.Tags_APItest@68bbe345]" name="StatusCodeVerification" duration-ms="3161" started-at="2020-08-12T19:12:00 IST" description="[API][Tags] Verify the status code" finished-at="2020-08-12T19:12:03 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StatusCodeVerification -->
        <test-method status="PASS" signature="setup()[pri:0, instance:badge.api.sanity.Tags_APItest@68bbe345]" name="setup" is-config="true" duration-ms="0" started-at="2020-08-12T19:12:00 IST" finished-at="2020-08-12T19:12:00 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="getResponseBody()[pri:0, instance:badge.api.sanity.Tags_APItest@68bbe345]" name="getResponseBody" duration-ms="2669" started-at="2020-08-12T19:12:03 IST" description="[API][Tags] Verify the response body" finished-at="2020-08-12T19:12:06 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResponseBody -->
        <test-method status="PASS" signature="verifyDefaultSort()[pri:0, instance:badge.api.sanity.Tags_APItest@68bbe345]" name="verifyDefaultSort" duration-ms="2617" started-at="2020-08-12T19:12:06 IST" description="[API][Tags] Verify that the rank is the default sort" finished-at="2020-08-12T19:12:08 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDefaultSort -->
        <test-method status="PASS" signature="verifyRank()[pri:0, instance:badge.api.sanity.Tags_APItest@68bbe345]" name="verifyRank" duration-ms="5729" started-at="2020-08-12T19:12:08 IST" description="[API][Tags] Verify that Bronze is the greatest, when rank sort is done" finished-at="2020-08-12T19:12:14 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRank -->
        <test-method status="PASS" signature="verifyResponseContent()[pri:0, instance:badge.api.sanity.Tags_APItest@68bbe345]" name="verifyResponseContent" duration-ms="3927" started-at="2020-08-12T19:12:14 IST" description="[API][Tags] Verify that the response content is JSON" finished-at="2020-08-12T19:12:18 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyResponseContent -->
      </class> <!-- badge.api.sanity.Tags_APItest -->
      <class name="badge.api.sanity.Recipients_APItest">
        <test-method status="PASS" signature="setup()[pri:0, instance:badge.api.sanity.Recipients_APItest@72b6cbcc]" name="setup" is-config="true" duration-ms="331" started-at="2020-08-12T19:10:23 IST" finished-at="2020-08-12T19:10:23 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="StatusCodeVerification()[pri:0, instance:badge.api.sanity.Recipients_APItest@72b6cbcc]" name="StatusCodeVerification" duration-ms="35824" started-at="2020-08-12T19:10:23 IST" description="[API][Recipients] Verify the status code [Without ID]" finished-at="2020-08-12T19:10:59 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StatusCodeVerification -->
        <test-method status="PASS" signature="getResponseBody()[pri:0, instance:badge.api.sanity.Recipients_APItest@72b6cbcc]" name="getResponseBody" duration-ms="2380" started-at="2020-08-12T19:10:59 IST" description="[API][Recipients] Verify the response body" finished-at="2020-08-12T19:11:02 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResponseBody -->
        <test-method status="PASS" signature="getResponseContent()[pri:0, instance:badge.api.sanity.Recipients_APItest@72b6cbcc]" name="getResponseContent" duration-ms="2558" started-at="2020-08-12T19:11:02 IST" description="[API][Recipients] Verify the response content is JSON" finished-at="2020-08-12T19:11:04 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResponseContent -->
        <test-method status="PASS" signature="verifyContentWithPageSize()[pri:0, instance:badge.api.sanity.Recipients_APItest@72b6cbcc]" name="verifyContentWithPageSize" duration-ms="3989" started-at="2020-08-12T19:11:04 IST" description="[API][Recipients] Verify that the content is displayed as per the page size" finished-at="2020-08-12T19:11:08 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyContentWithPageSize -->
        <test-method status="PASS" signature="verifyCorrectBadgeID()[pri:0, instance:badge.api.sanity.Recipients_APItest@72b6cbcc]" name="verifyCorrectBadgeID" duration-ms="4128" started-at="2020-08-12T19:11:08 IST" description="[API][Recipients] Verify correctness of badge ID in the response [ID provided]" finished-at="2020-08-12T19:11:12 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCorrectBadgeID -->
        <test-method status="PASS" signature="verifyStatusCodeWith101()[pri:0, instance:badge.api.sanity.Recipients_APItest@72b6cbcc]" name="verifyStatusCodeWith101" duration-ms="3468" started-at="2020-08-12T19:11:12 IST" description="[API][Recipients] Verify the status code when 101 badge_ids are to be processed" finished-at="2020-08-12T19:11:16 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyStatusCodeWith101 -->
      </class> <!-- badge.api.sanity.Recipients_APItest -->
      <class name="badge.api.sanity.ID_APItest">
        <test-method status="PASS" signature="setup()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="setup" is-config="true" duration-ms="0" started-at="2020-08-12T19:11:16 IST" finished-at="2020-08-12T19:11:16 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="StatusCodeVerification()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="StatusCodeVerification" duration-ms="4575" started-at="2020-08-12T19:11:16 IST" description="[API][ID] Verify the status code." finished-at="2020-08-12T19:11:20 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StatusCodeVerification -->
        <test-method status="PASS" signature="StatusCodeVerificationWithoutParameters()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="StatusCodeVerificationWithoutParameters" duration-ms="7496" started-at="2020-08-12T19:11:20 IST" description="[API][ID] Verify the status code when the parameters are not provided [automatically takes the default value]" finished-at="2020-08-12T19:11:28 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StatusCodeVerificationWithoutParameters -->
        <test-method status="PASS" signature="getResponseBody()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="getResponseBody" duration-ms="6774" started-at="2020-08-12T19:11:28 IST" description="[API][ID] Verify the response body" finished-at="2020-08-12T19:11:35 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResponseBody -->
        <test-method status="PASS" signature="getResponseContentType()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="getResponseContentType" duration-ms="3298" started-at="2020-08-12T19:11:35 IST" description="[API][ID] Verify that the response is in JSON" finished-at="2020-08-12T19:11:38 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResponseContentType -->
        <test-method status="PASS" signature="multipleBadgeIDLimit100()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="multipleBadgeIDLimit100" duration-ms="6201" started-at="2020-08-12T19:11:38 IST" description="[API][ID] Verify the status code when 100 badge_ids are to be processed" finished-at="2020-08-12T19:11:44 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multipleBadgeIDLimit100 -->
        <test-method status="PASS" signature="multipleBadgeIDLimit101()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="multipleBadgeIDLimit101" duration-ms="4092" started-at="2020-08-12T19:11:44 IST" description="[API][ID] Verify the status code when 101 badge_ids are to be processed" finished-at="2020-08-12T19:11:48 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multipleBadgeIDLimit101 -->
        <test-method status="PASS" signature="verifyBadgeIDInputNegative()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="verifyBadgeIDInputNegative" duration-ms="4024" started-at="2020-08-12T19:11:48 IST" description="[API][ID] Verify that error is thrown when the badge_id is not sent as an int" finished-at="2020-08-12T19:11:52 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyBadgeIDInputNegative -->
        <test-method status="PASS" signature="verifyBadgeIDMapping()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="verifyBadgeIDMapping" duration-ms="2759" started-at="2020-08-12T19:11:52 IST" description="[API][ID] Verify that the data is picked correctly as per the badge_id" finished-at="2020-08-12T19:11:55 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyBadgeIDMapping -->
        <test-method status="PASS" signature="verifySemicolonDelimiter()[pri:0, instance:badge.api.sanity.ID_APItest@a7e666]" name="verifySemicolonDelimiter" duration-ms="4596" started-at="2020-08-12T19:11:55 IST" description="[API][ID] Verify that by sending multiple IDs [2], multiple items are present in json " finished-at="2020-08-12T19:12:00 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySemicolonDelimiter -->
      </class> <!-- badge.api.sanity.ID_APItest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
